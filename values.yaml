# Default values for kafka-helm.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

image:
  repository: nginx
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}
podLabels: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  port: 80

ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

# Additional volumes on the output Deployment definition.
volumes: []
# - name: foo
#   secret:
#     secretName: mysecret
#     optional: false

# Additional volumeMounts on the output Deployment definition.
volumeMounts: []
# - name: foo
#   mountPath: "/etc/foo"
#   readOnly: true

nodeSelector: {}

tolerations: []

affinity: {}

kafka:
  listeners:
    client:
      protocol: PLAINTEXT
    controller:
      protocol: PLAINTEXT
    interbroker:
      protocol: PLAINTEXT
    external:
      protocol: PLAINTEXT
  provisioning:
    enabled: true
    numPartitions: 3
    replicationFactor: 1
    topics:
      - name: test
        partitions: 1
        replicationFactor: 1

kafkaBroker:
  endpoint: "localhost:9092"
  user: "user1"

kafkaPort: 9092


deployment:
  replicas: 1
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  minReadySeconds: 30
  progressDeadlineSeconds: 120

primaryContainer:
  name: csye7125-webapp
  repository: sumanthksai/consumer-webapp
  tag: 1.0.0
  pullPolicy: IfNotPresent
  ports:
    containerPort: 4000
  readinessProbe:
    httpGet:
      path: /healthz
      port: 4000
    initialDelaySeconds: 5
    periodSeconds: 10
  livenessProbe:
    httpGet:
      path: /healthz
      port: 4000
    initialDelaySeconds: 10
    periodSeconds: 20
  volumeMounts:
    - name: secret-volume-v1
      mountPath: /flyway/db_password.txt
      subPath: db_password.txt

initContainer:
  enabled: true
  name: flyway-migrate
  image:
    repository: sumanthksai/fly-v2
    tag: latest
  volumeMounts:
    - name: flyway-config-volume-v1
      mountPath: /flyway/conf
    - name: secret-volume-v1
      mountPath: /flyway/db_password.txt
      subPath: db_password.txt

# ConfigMap settings
configMap:
  enabled: true
  data:
    flyway: |
      
      flyway.user=postgres
      flyway.password=postgres
      flyway.baselineOnMigrate=false

# Secrets settings
secrets:
  enabled: true
  data:
    DB_PASSWORD: cG9zdGdyZXM=

env:
  # - name: DB_USERNAME
  #   value: "postgres"
  - name: DB_NAME
    value: "app"
  # - name: DB_HOST
  #   value: "webapp-postgresql.default.svc.cluster.local"
  - name: DB_PORT
    value: "5432"
  - name: APP_PORT
    value: "4000"

postgresql:
    auth:
      postgresPassword: "postgres"
      username: "postgres"
      password: "postgres"
      database: "app"
    service:
      ports:
        postgresql: "5432"